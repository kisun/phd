\documentclass[11pt]{article}

\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{xfrac}

\usepackage{fullpage}
\usepackage{parskip}

<<echo=FALSE,results="hide">>=
which <- 25
@ 


\newcommand{\bx}{\boldsymbol{x}}
\newcommand{\bu}{\boldsymbol{u}}
\newcommand{\bw}{\boldsymbol{w}}
\newcommand{\bz}{\boldsymbol{z}}
\newcommand{\by}{\boldsymbol{y}}
\newcommand{\bh}{\boldsymbol{h}}
\newcommand{\bv}{\boldsymbol{v}}
\newcommand{\bfn}{\boldsymbol{f}}
\newcommand{\bF}{\boldsymbol{F}}
\newcommand{\bH}{\boldsymbol{H}}
\newcommand{\bK}{\boldsymbol{K}}
\newcommand{\bQ}{\boldsymbol{Q}}
\newcommand{\bR}{\boldsymbol{R}}
\newcommand{\bP}{\boldsymbol{P}}
\newcommand{\bS}{\boldsymbol{S}}
\newcommand{\bZero}{\boldsymbol{0}}
\newcommand{\dd}[2]{\frac{\partial {#1}}{\partial {#2}}}


\newcommand{\km}{_{k-1}}
\newcommand{\kk}{_{k|k}}
\newcommand{\kkm}{_{k|k-1}}
\newcommand{\kmkm}{_{k-1|k-1}}


\title{Kalman Filter}
\author{Overview of models}
\date{}

\begin{document}
\maketitle



\section{The Data}

The data come in two parts: GTFS Realtime, for the live location of the bus, and GTFS
Static, for the schedule information (such as route shape, and stop schedule times).  
For now, we ignore the procedures involved in converting GPS location data provided by 
GTFS Realtime into useable data (distance-into-trip), and instead use only the stop arrival
times (and their distances into trip) to get a base speed curve.

An example of the schedule times is here:
<<stop_times,echo=FALSE,results="hide",fig.width=8,fig.height=5,out.width="0.5\\textwidth",fig.align="center">>=
sched <- dget("stopinfo-.dat")
with(sched, plot(time, shape_dist_traveled, pch = 19, xlab = "Time (s)", ylab = "Distance (m)", cex = 0.6,
                 main = "Scheduled arrival times"))
@ 

Obviously, we can't fit a line through points with the same $x$ coordinates, so instead we will only fit the curve
through those with the smallest $y$ values.
We can then use polynomial interpolation to interpolate the scheduled bus path over time:
<<stop_times_curve,echo=FALSE,results="hide",fig.width=8,fig.height=5,out.width="0.5\\textwidth",fig.align="center">>=
with(sched, plot(time, shape_dist_traveled, pch = 19, xlab = "Time (s)", ylab = "Distance (m)", cex = 0.6,
                 col = "#00000040", main = "Scheduled arrival times"))
x <- unique(sched$time)
y <- tapply(sched$shape_dist_traveled, sched$time, min)
schedF <- splinefun(x, y, method = "fmm")
curve(schedF(x), min(x), max(x), 1001, add = TRUE)
points(x, y, cex = 0.6, pch = 21, bg = "white")
@ 




\section{Extended Kalman Filter (EKF) Model}

The state vector is
\begin{equation}
  \label{eq:state-vector}
  \bx_k =
  \begin{bmatrix}
    d_k \\ v_k
  \end{bmatrix}
\end{equation}
where $d_k$ is the distance-into-trip (m) of observation $k$, and $v_k$ is the velocity (m/s) at
observation $k$.


We will be using a nonlinear Kalman Filter to account for scheduled distance traveled in time $\Delta t_k$,
historical information, and a velocity ``penalty'' term:
\begin{equation}
  \label{eq:nonlinKF}
  \bx_k = f\left(\bx_{k-1}, \bu_{k-1}\right) + \bw_{k-1}.
\end{equation}

The control vector, $\bu_k$, will contain additional information used to predict and adjust the estimates of $\bx_k$,
\begin{equation}
  \label{eq:control_vector}
  \bu_k = 
  \begin{bmatrix}
    t_k \\ \Delta t_k
  \end{bmatrix},
\end{equation}
where $t_k$ is the time (in seconds since the trip/block began) of observation $k$, 
and $\Delta t_k$ is the time between observations $k$ and $k+1$.

The difficulty now lies in defining $f$; at first, we can define it as ``the scheduled distance traveled in $\Delta t_k$~s, starting from $d_k$~m into the trip, with a penalty based on the velocity''. For further readability, we define $g = s^{-1}$, which gives us the ``scheduled time'' of a given distance-into-trip:
\begin{align}
  \label{eq:function1}
  \hat d_{k} &= f_d\left(\bx_{k-1},\bu_{k-1}\right) 
  = d_{k-1} + \left[s\left(g\left(d_{k-1}\right) + \Delta t_{k-1}\right) - d_{k-1}\right] \lambda\left(v_{k-1}\right) \\
  \Rightarrow \hat x_{k,1} &= x_{k-1,1} + \left[s\left(g\left(x_{k-1,1}\right) + u_{k-1,2}\right) - x_{k-1,1}\right] \lambda\left(x_{k-1,2}\right) \\
  \intertext{and (for now, assuming a simple velocity function)}
  \hat v_k &= f_v\left(\bx_{k-1},\bu_{k-1}\right) 
  = \frac{s'\left(g\left(d_{k-1}\right) + \Delta t_{k-1}\right)}{s'\left(g\left(d_{k-1}\right)\right)} v_{k-1} \\
  \Rightarrow \hat x_{k,2} &= \frac{s'\left(g\left(x_{k-1,1}\right) + u_{k-1,2}\right)}{s'\left(g\left(x_{k-1,1}\right)\right)} x_{k-1,2}, \\
  \intertext{which gives}
  \hat\bx_k &= \bfn\left(\bx_{k-1},\bu_{k-1}\right) 
  = \begin{bmatrix}
      f_d\left(\bx_{k-1},\bu_{k-1}\right) \\ f_v\left(\bx_{k-1},\bu_{k-1}\right) 
    \end{bmatrix}
\end{align}
However, this needs to be differentiable \ldots we can obtain derivatives of $s$ from the polynomial splines used to create it,
but will this be adequate?

For the Jacobian,
\begin{equation}
  \label{eq:jacobian}
  \bF_k = 
  \begin{bmatrix}
    \frac{\partial\bfn}{\partial x_{k,1}} & \frac{\partial\bfn}{\partial x_{k,2}}_{\hat\bx_{k|k},\bu_k}
  \end{bmatrix},
\end{equation}
which is made up of four partial derivatives (two for each $f$, and dropping the $k$ subscripts for readability):
\begin{align*}
  \dd{f_d}{x_1} &= 1 + \left[s'\left(g\left(x_1\right) + u_2\right)g'\left(x_1\right) - 1\right] \lambda\left(x_2\right) \\
  \dd{f_d}{x_2} &= \left[s\left(g\left(x_1\right) + u_2\right) - x_2\right] \lambda'\left(x_2\right) \\
  \dd{f_v}{x_1} &= \left\{\frac{g'\left(x_1\right) \left[s''\left(g\left(x_1\right) + u_2\right) s'\left(g\left(x_1\right)\right) - s'\left(g\left(x_1\right) + u_2\right) s''\left(g\left(x_1\right)\right)\right]}{\left[s'\left(g\left(x_1\right)\right)\right]^2}\right\} x_2 \\
  \dd{f_v}{x_2} &= \frac{s'\left(g\left(x_1\right) + u_2\right)}{s'\left(g\left(x_1\right)\right)}.
\end{align*}
Fortunately, we only need to be able to evaluate $F$, and the polynomial spline function gives us $s$, $s'$ and $s''$!


For the measurement matrix $\bH$, we use the Jacobian of the function $h$ which maps the predicted state to the observations:
\begin{equation}
  \label{eq:measurements}
  \bz_k = \bh\left(\bx_k\right) + \bv_k,
\end{equation}
where
\begin{align*}
  \bh\left(\bx_k\right) 
  &= 
    \begin{bmatrix}
      x_{k,1} \\ 0
    \end{bmatrix}
\end{align*}
and therefore
\begin{equation*}
  \bH = 
  \begin{bmatrix}
    \dd{h}{x_{k,1}} & \dd{h}{x_{k,2}}
  \end{bmatrix}
  = 
  \begin{bmatrix}
    1 & 0
  \end{bmatrix}
\end{equation*}


We will still need the covariance matrices $\bQ$ and $\bR$, such that:
\begin{align*}
  \bw_{k-1} &\sim \mathcal{N}\left(\bZero, \bQ\right) \\
  \bv_k &\sim \mathcal{N}\left(\bZero, \bR\right).
\end{align*}
This, however, presents an opportunity to use historical data to estimate both $\bQ$ and $\bR$;
this does require historical data, which we don't (yet) have. Based on a set of data we have used (so far),
we will use an estimate of
\begin{equation*}
  \bQ =
  \begin{bmatrix}
    580^2 & -100 \\ -100 & 2.5^2
  \end{bmatrix},
\end{equation*}
and $\bR$, which is essentially the measurement error, we base off of previous studies, $R = \left(150\text{~m}\right)^2$ 
(this is a scalar because the observations are only a single variable: distance-into-trip).


This should be everything we need to implement the following algorithm:

\textbf{Predict}
\begin{align*}
  \intertext{Predicted state estimate}
  \hat\bx\kkm &= \bfn\left(\hat\bx\kmkm, \bu\km\right) \\
  \intertext{Predicted covariance estimate}
  \bP\kkm &= \bF\km \bP\kmkm \bF^T\km + \bQ\km
\end{align*}

\textbf{Update}
\begin{align*}
  \intertext{Innovation or measurement residual}
  \tilde\by_k &= \bz_k - \bh\left(\hat\bx\kkm\right) \\
  \intertext{Innovation (or residual) covariance}
  \bS_k &= \bH_k \bP\kkm \bH^T_k + \bR_k \\
  \intertext{Near-optimal Kalman Gain}
  \bK_k &= \bP\kkm \bH^T_k \bS^{-1}_k \\
  \intertext{Updated covariance estimate}
  \bP\kk &= \left(\boldsymbol{I} - \bK_k \bH_k\right) \bP\kkm \\
  \intertext{Updated state estimate}
  \hat\bx\kk &= \hat\bx\kkm + \bK_k \tilde\by_k
\end{align*}



\section{Example data set}

We obtained a series of GPS observations for a trip.
For the most part, the observations occur every 60~seconds, with some error, and one
occasion where there is a delay of only 10~seconds.
<<data_set,echo=FALSE,results="hide",fig.width=8,fig.height=5,out.width="0.5\\textwidth",fig.align="center">>=
dat <- dget(paste0("triphistory-", which, ".dat"))
dat$T <- dat$time
dat$T <- dat$T - min(dat$T)
dat$dist[1] <- 0
plot(dat$T, dat$dist, xlab = "Time (s)", ylab = "Distance into trip (m)",
     xlim = range(dat$tT, sched$time), ylim = range(dat$dist, sched$shape_dist_traveled))
curve(schedF(x), min(x), max(x), col = "red", lty = 2, add = TRUE)

x <- dat$dist
t <- dat$T
@ 


We now implement the Extended Kalman Filter as described above.


We assume that the initial time and location are 0, although the velocity is unknown, so the initilisation matrices are:
\begin{equation*}
  \mathbf{\hat x}_0 = 
  \begin{bmatrix}
    0 \\ s(0)
  \end{bmatrix}
  \quad \text{and} \quad
  \mathbf{P}_0 =
  \begin{bmatrix}
    0 & 0 \\ 0 & L
  \end{bmatrix}
\end{equation*}
where $L = 100$ is the variation of speed.



Here's the implementation in R:
<<kalman_filter,fig.height=5,fig.width=9>>=
## observed times
t <- dat$T
## observed distances
d <- dat$dist

## the schedule and inverse-schedule functions
st <- unique(sched$time)
sd <- tapply(sched$shape_dist_traveled, sched$time, min)

s <- splinefun(st, sd)
g <- splinefun(sd, st)

## prediction function
lambda <- function(...) 1 ## for now, do nothing ...
lambda. <- function(...) 0

f <- function(x, u)
    c(x[1] + (s(g(x[1]) + u[2]) - x[1]) * lambda(x[2]),
      s(g(x[1]) + u[2], 1) / s(g(x[1]), 1) * x[2])

## and it's jacobian:
F <- function(x, u) {
    f1x1 <- 1 + (s(g(x[1]) + u[2], 1) * g(x[1], 1) - 1) * lambda(x[2])
    f1x2 <- (s(g(x[1]) + u[2]) - x[2]) * lambda.(x[2])
    
    f2x1 <- ((g(x[1], 1) * (s(g(x[1]) + u[2], 2) * s(g(x[1]), 1) - s(g(x[1]) + u[2], 1) * s(g(x[1]), 2))) / (s(g(x[1]), 1)^2)) * x[2]
    f2x2 <- s(g(x[1]) + u[2], 1) / s(g(x[1]), 1)
    
    rbind(c(f1x1, f1x2), c(f2x1, f2x2))
}

## Measurement matrix:
h <- function(x) rbind(x[1], 0)
H <- function(x) cbind(1, 0)

## Variance matrices:
Q <- rbind(c(580^2, -100),
           c(-100, 2.5^2))
R <- 250^2

## And the initialisation:
X. <- X <- array(NA, c(2, length(x)))
X[, 1] <- rbind(0, s(0))
P. <- P <- array(NA, c(2, 2, length(x)))
P[,,1] <- rbind(c(0, 0), c(0, 100))


## and run it ...

EKF <- function(d) {
    ## input d is a list of :
    ## xhat  the estimate of \hat x_{k-1}
    ## Phat  the estimate of \hat P_{k-1}
    ## z     the data z_k
    ## u     the control variables u_{k-1}
    
    ## return:
    ## x.  the a priori estimate of x_k
    ## P.  the a priori estimate of covariance
    ## xn  the a posteriori estimate of x_k
    ## Pn  the a posteriori estimate of covariance
    
    ## predict
    x. <- f(d$xhat, d$u)
    Fk <- F(d$xhat, d$u)
    P. <- Fk %*% d$Phat %*% t(Fk) + Q
    
    ## update
    if ("z" %in% names(d)) {
        yk <- d$z - h(x.)
        
        Hk <- H(x.)
        Sk <- Hk %*% P. %*% t(Hk) + R
        
        Kk <- P. %*% t(Hk) %*% solve(Sk)
        
        Pn <- (diag(2) - Kk %*% Hk) * P.
        
        xn <- x. + Kk %*% yk[1]
    } else {
        Pn <- P.
        xn <- x.
    }
    
    list(x. = x., P. = P., xn = xn, Pn = Pn)
}

for (k in 2:length(x)) {
    d <- list(xhat = X[, k-1], Phat = P[,,k-1], z = c(x[k], 0), u = c(t[k-1], diff(t)[k-1]))
    KF <- EKF(d)
    X.[, k] <- KF$x.
    P.[,,k] <- KF$P.
    X[, k] <- KF$xn
    P[,,k] <- KF$Pn
}

plot(t, x, type = "n", xlim = c(0, 700), ylim = c(0, s(700)))
curve(s(x), 0, 700, add=T, col="red")
lines(t, X[1, ], col = "blue", cex = 0.5, pch = 19)
xhat. <- X.[1, ]
xhatSD. <- sqrt(P[1,1,])
ci.l <- qnorm(0.025, xhat., xhatSD.)
ci.u <- qnorm(0.975, xhat., xhatSD.)
arrows(t, ci.l, t, ci.u, length = 0.05, angle = 90, code = 3, col = "#00880060")
points(t, xhat., pch = 21, bg = "white", col = "#00880060")
points(t, x, cex = 0.4, pch = 19)

@ 


It looks like the bus was delayed starting its route, but after that it has no delays. Lets look at predicting the arrival time at the second-to-last stop.


<<echo=FALSE,results="hide",fig.width=8,fig.height=5,out.width="0.8\\textwidth",fig.align="center">>=
plotMe <- function() {
    with(sched, plot(time, shape_dist_traveled, pch = 19, xlab = "Time (s)", ylab = "Distance (m)", cex = 0.6,
                     col = "#00000040", main = "Scheduled arrival times", yaxs="i"))
    curve(schedF(x), min(x), max(x), 1001, add = TRUE)
    LASTn2 <- sched[nrow(sched) - 1, ]
    with(LASTn2, points(time, shape_dist_traveled, pch = 19, col = "#CCCC0070"))
    lines(c(-50, LASTn2$time), rep(LASTn2$shape_dist_traveled, 2), lty = 3)
}
plotMe()
@ 

After the first few EKF iterations, we can predict into the future?

<<>>=
## the initialisation:
X. <- X <- array(NA, c(2, length(x)))
X[, 1] <- rbind(0, s(0))
P. <- P <- array(NA, c(2, 2, length(x)))
P[,,1] <- rbind(c(0, 0), c(0, 100))

for (k in 2:5) {
    d <- list(xhat = X[, k-1], Phat = P[,,k-1], z = c(x[k], 0), u = c(t[k-1], diff(t)[k-1]))
    KF <- EKF(d)
    X.[, k] <- KF$x.
    P.[,,k] <- KF$P.
    X[, k] <- KF$xn
    P[,,k] <- KF$Pn
}

plotMe()
lines(t[1:k], X[1, 1:k], col = "blue", cex = 0.5, pch = 19)
xhat. <- X.[1, 1:k]
xhatSD. <- sqrt(P[1,1,1:k])
ci.l <- qnorm(0.025, xhat., xhatSD.)
ci.u <- qnorm(0.975, xhat., xhatSD.)
arrows(t[1:k], ci.l, t[1:k], ci.u, length = 0.05, angle = 90, code = 3, col = "#00880060")
points(t[1:k], xhat., pch = 21, bg = "white", col = "#00880060")
points(t[1:k], x[1:k], cex = 0.4, pch = 19)

## now, progress forward:
for (k in 6:length(x)) {
    d <- list(xhat = X[, k-1], Phat = P[,,k-1], u = c(t[k-1], diff(t)[k-1]))
    KF <- EKF(d)
    X.[, k] <- KF$x.
    P.[,,k] <- KF$P.
    X[, k] <- KF$xn
    P[,,k] <- KF$Pn
}

xhat. <- X.[1, 6:k]
xhatSD. <- sqrt(P[1,1,6:k])
ci.l <- qnorm(0.025, xhat., xhatSD.)
ci.u <- qnorm(0.975, xhat., xhatSD.)
arrows(t[6:k], ci.l, t[6:k], ci.u, length = 0.05, angle = 90, code = 3, col = "#00880060")
points(t[6:k], xhat., pch = 21, bg = "white", col = "#00880060")

points(t[6:k], x[6:k], cex = 0.4, pch = 19, col = "#33333340")
@ 


\end{document}
